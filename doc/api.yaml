openapi: 3.0.3
info:
  title: WasaPhoto API
  description: |-
    This API defines how an application can interface with the WasaPhoto social,
    providing functions to obtain and change informations about users and posts.
  version: 0.0.1
tags:
  - name: Session
    description: |-
      Tag related to user creation, authentication and login operations.
  - name: User
    description: |-
      Tag related to general user-related operations.
  - name: Follow
    description: |-
      Tag related to follows/follower-related operations.
  - name: Privacy
    description: |-
      Tag related to user privacy-related operations.
  - name: Post
    description: |-
      Tag related to general post-related operations.
paths:
  /session:
    post:
      tags:
        - Session
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserName'
        required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '201':
          description: Created new User and logged-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
  /users/{uid}:
    summary: Represents a user
    description: |-
      The resource represent an individual users registered on WasaPhoto.
      Each user is identified by a numeric unique id.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - User
      summary: Redirects to the user's profile.
      description: |-
        The resource redirect the request to retrieve the user profile by its own uid.
      operationId: redirectToUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SimpleOkResponse'
        '301':
          description: Users information retrieved successfully. Redirected request.
          headers:
            Location:
              schema:
                type: string
                example: /users/{uid}/profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
    put:
      tags:
        - User
      summary: Change the username of uid.
      description: |-
        Change the username of a user identified by a numeric unique id.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: |-
          The new username for uid.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserName'
      responses:
        '200':
          $ref: '#/components/responses/SimpleOkResponse'
        '400':
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
    delete:
      tags:
        - User
      summary: Delete the user.
      description: |-
        Deletes the user associatet with uid.
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SimpleOkResponse'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/feeds:
    summary: Represents the user post stream.
    description: |-
      The resource represent the list of the most recent posts published by the
      follows of uid.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - User
      summary: Gets the users Feeds by uid.
      description: |-
        Retrieve the list of the most recent posts published by the follows
        of uid.
      operationId: getMyStream
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SimpleOkResponse'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/profile:
    summary: Represents the user profile.
    description:  |-
      The resource represent the details of the user profile: His username,
      statistics and post.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - User
      summary: Gets the user profile
      description: |-
        Retrieve the user username, statistics and posts by its uid.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/UserNotFound'
# User Follows/Follower logic ------------------------------------------------------------------------
  /users/{uid}/follows:
    summary: Represents the users followed by uid.
    description: |-
      The resource represent the list of users followed by uid.
      Each user followed has its own unique uid.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - Follow
      summary: Gets the users followed by uid.
      description: |-
        Retrieve the list of the followed users by uid, with their personal name
        and uid.
      operationId: getUserFollows
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users follows retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/follows/{uid2}:
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/uid2'
# TODO: Add Get redirecto to uid2 profile
    post:
      tags:
        - Follow
      summary: Adds an user to the follower of uid.
      description: |-
        Adds an user to the follower of uid.
      operationId: followUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: User followed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
    delete:
      tags:
        - Follow
      summary: Remove a follow of uid.
      description: |-
        Remove the specified follower from the uid's
      operationId: unfollowUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User unfollowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/follower:
    summary: Represents the uid followers.
    description: |-
      The resource represent the list of uid's follower.
      Each followe has its own unique uid.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - Follow
      summary: Gets the uid's followers.
      description: |-
        Retrieve the list of the uid's follower, with their personal name
        and uid.
      operationId: getUserFollers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Uid's followers retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/follower/{uid2}:
# TODO: Add Get redirect to uid2 profile
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/uid2'
    post:
      tags:
        - Follow
      summary: Adds an user to the follower of uid.
      description: |-
        Adds an user to the follower of uid.
      operationId: getFollower
      security:
        - bearerAuth: []
      responses:
        '201':
          description: User followed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/bans:
    summary: Represents the uid bans.
    description: |-
      The resource represent the list of uid's bans, with theri personal name 
      and uid.
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags:
        - Privacy
      operationId: getUserBans
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Uid's bans retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{uid}/bans/{uid2}:
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/uid2'
    post:
      tags:
        - Privacy
      summary: Adds an user to the ban list of uid.
      description: |-
        Adds an user to the ban list of uid.
        It also make the user banned unfollow uid.
      operationId: banUser
      security:
        - bearerAuth: []
      responses:
        '201':
          description: User banned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '409':
          description: User is already banned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
    delete:
      tags:
        - Privacy
      summary: Remove a banned user from uid's ban list.
      description: |-
        Remove the specified follower from uid's ban list.
      operationId: unbanUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User unbanned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRequestContent'
        '404':
          $ref: '#/components/responses/UserNotFound'
# TODO: Add /posts/{pid} => post, get, delete
#           /posts/{pid}/comments => get
#           /posts/{pid}/comments/{cid} => get, put and delete
#           /posts/{pid}/owner => get(redirects)
#           /posts/{pid}/caption => get and put
#       Add schema for cid
#       Clean check
#       Dummy properties (min/max, summary, description, string pattern)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    uid:
      name: uid
      in: path
      description: The User Id
      required: true
      schema:
        type: string
        example: "abcdef012345"
    uid2:
      name: uid2
      in: path
      description: The second User Id
      required: true
      schema:
        type: string
        example: "abcdef012345"
    pid:
      name: pid
      in: path
      description: The Post Id
      required: true
      schema:
        type: string
        example: "abcdef102345"
  schemas:
    BearerToken:
      type: object
      properties:
        token:
          type: string
          example: "jsonwebtoken"
    UserId:
      type: object
      properties:
        id:
          type: string
          example: "abcdef012345"
          minLength: 12
          maxLength: 12
    UserName:
      type: object
      properties:
        username:
          type: string
          example: "JohnDoe"
          pattern: '[a-zA-Z0-9_](3-20)'
          minLength: 3
          maxLength: 20
    PostId:
      type: object
      properties:
        id:
          type: string
          example: "abcdefgh0123456"
          minLength: 15
          maxLength: 15
    PostText:
      type: object
      properties:
        id:
          type: string
          example: "This is a comment"
          minLength: 0
          maxLength: 200
    ImageUrl:
      type: object
      properties:
        uri:
          type: string
          format: uri
    UserSession:
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/UserName'
        token:
          $ref: '#/components/schemas/BearerToken'
    UserBio:
      properties:
        bio:
          type: string
          minLength: 0
          maxLength: 50
    User:
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/UserName'
        bio:
          $ref: '#/components/schemas/UserBio'
        profileImage:
          $ref: '#/components/schemas/ImageUrl'
        posts:
          $ref: '#/components/schemas/Posts'
        follower:
          $ref: '#/components/schemas/Follower'
        follows:
          $ref: '#/components/schemas/Follows'
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
      minItems: 0
      maxItems: 200
    Post:
      properties:
        id:
          $ref: '#/components/schemas/PostId'
        caption:
          $ref: '#/components/schemas/PostText'
        image:
          $ref: '#/components/schemas/ImageUrl'
        comments:
          $ref: '#/components/schemas/Comments'
        createdAt:
          type: string
          format: date-time
        likes:
          type: integer
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'
      minItems: 0
      maxItems: 30
    Comment:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/UserId'
        content:
          $ref: '#/components/schemas/PostText'
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
      minItems: 0
      maxItems: 200
    Follower:
      type: array
      items:
        $ref: '#/components/schemas/User'
      minItems: 0
      maxItems: 200
    Follows:
      type: array
      items:
        $ref: '#/components/schemas/User'
      minItems: 0
      maxItems: 200
    GenericRequestContent:
      type: object
      properties:
        status_code:
          type: integer
          example: 200
          default: 200
        message:
          type: string
          example: "Ok"
          default: "Ok"
  responses:
    UserNotFound:
      description: User not Found.
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                default: 404
              message:
                type: string
                default: "No user found"
    PostNotFound:
      description: Post not Found.
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                default: 404
              message:
                type: string
                default: "No post found"
    CommentNotFoun:
      description: Comment not Found.
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                default: 404
              message:
                type: string
                default: "No comment found"
    SimpleOkResponse:
      description: Simple Successful Operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericRequestContent'