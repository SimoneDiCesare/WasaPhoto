openapi: 3.0.3
info:
  title: WASAPhosto API Specification
  decription: |
    TODO
  version: "1.0.0"

servers:
  - url: "http://localhost:3000"
    decription: "Local hosting project"

tags:
  - name: auth
    decription: Auth operations
  - name: user
    decription: User operations
  - name: follow
    decription: Follows/Follower operations
  - name: post
    decription: Post operations

paths:
  /login:
    post:
      tags: ["auth"]
      summary: Logs in operation
      description: |
        Logs in a user by its username.
        If the username does not exists, it will be created a new user with the
        specified username and than logged in.
      operationId: doLogin
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema: {$ref: "#/components/schemas/LoginRequest"}
      responses:
        "200":
          description: User logged in.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserLogin"}
        "201":
          description: User created and logged in.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserLogin"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "500": {$ref: "#/components/responses/GenericServerError"}
      security: []
      # security:
      # - bearerAuth: []

components: 
  responses:
    GenericBadRequest:
      description: |
        The request is not consistent with API specifications.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
    GenericServerError:
      description: |
        Unexpected generic error on the server.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
  
  schemas:
# Security
    BearerToken:
      description: |
        User authentication token, passed via login.
      type: object
      properties:
        token:
          description: The bearer token used for authentication during requests
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          pattern: '^[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_.+/=]+$'
          minLength: 80 
          maxLength: 80
# Generic data
    GenericError:
      description: Generic error description.
      type: string
      minLength: 0
      maxLength: 250
      readOnly: true
    
    ResourceId:
      description: A generic resource 64-bit ID as a base-16 string.
      type: string
      example: "517dc7caa704a06f"
      minLength: 1
      maxLength: 16
      readOnly: true
      pattern: ^[0-9a-fA-F]{1,16}

    Username:
      description: User's personal and unique username.
      type: string
      example: john_doe_42
      pattern: ^[a-z_0-9]{3,16}
      minLength: 3
      maxLength: 16
# Request datas
    LoginRequest:
      description: User data for login.
      type: object
      properties:
        username: {$ref: "#/components/schemas/Username"}

    UserLogin:
      description: Result data at user login
        type: object
        properties:
          uid: {$ref: "#/components/schemas/ResourceId"}
          username: {$ref: "#/components/schemas/Username"}
          token: {$ref: "#/components/schemas/BearerToken"}


security:
  - UserToken: []