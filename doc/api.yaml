openapi: 3.0.3
info:
  title: WASAPhoto API Specification
  decription: |
    Keep in touch with your friends by sharing photos of special moments,
    thanks to WASAPhoto! You can upload your photos directly from your PC,
    and they will be visible to everyone following you.
  version: "1.0.0"

servers:
  - url: "http://localhost:3000"
    decription: "Local hosting project"

tags:
  - name: auth
    decription: Auth operations.
  - name: user
    decription: User operations.
  - name: follow
    decription: Follows/Follower operations.
  - name: ban
    description: Banning operations.
  - name: post
    decription: Post operations.

paths:
# Logic operations
  /login:
    description: Endpoint for login/register operations.
    post:
      tags: ["auth"]
      summary: Logs in operation
      description: |
        Logs in a user by its username.
        If the username does not exists, it will be created a new user with the
        specified username and than logged in.
      operationId: doLogin
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema: {$ref: "#/components/schemas/LoginRequest"}
      responses:
        "200":
          description: User logged in.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserLogin"}
        "201":
          description: User created and logged in.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserLogin"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "500": {$ref: "#/components/responses/GenericServerError"}
      security: []
# User generic operations
  /users:
    description: List of all users registered to WASAPhoto.
    get:
      tags: ["user"]
      operationId: searchUsers
      summary: Search users by username
      description: |
        Search users by a part or the entire username.
      parameters:
        - name: username
          in: query
          description: Text to search.
          required: true
          schema: {$ref: "#/components/schemas/Username"}
      responses:
        "200": {$ref: "#/components/responses/UserListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /users/{uid}:
    description: Single user path.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["user"]
      operationId: getUserProfile
      summary: Retrieve user's profile data.
      description: |
        Get user's profile data, containing:
        - Username
        - Follows/Follower count
        - List of his posts
      responses:
        "200":
          description: Get user's profile data.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserProfileData"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "500": {$ref: "#/components/responses/GenericServerError"}
    put:
      tags: ["user"]
      operationId: setMyUserName
      description: |
        Changes the user's username.
      requestBody:
        description: The new username.
        required: true
        content:
          text/plain:
            schema: {$ref: "#/components/schemas/Username"} 
      responses:
        "200":
          description: User username updated.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/UserSimpleData"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
# Feeds
  /users/{uid}/feeds:
    description: Feeds for a user.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["user"]
      operationId: getMyStream
      summary: Get feeds of logged-in user.
      description: |
        Get in reverse chronological order the posts from the user followed by
        the user requesting the feeds.
      responses:
        "200": {$ref: "#/components/responses/FeedsResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
# Follow logic
  /users/{uid}/follows:
    description: List of a user follows.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["follow"]
      operationId: getFollows
      summary: List user's follows.
      description: |
        Retrieve a list of users followed by this user.
      responses:
        "200": {$ref: "#/components/responses/FollowListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /users/{uid}/follower:
    description: List of a user followers.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["follow"]
      operationId: getFollowers
      summary: List user's followers.
      description: |
        Retrieve a list of users following this user.
      responses:
        "200": {$ref: "#/components/responses/FollowListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /users/{uid}/follower/{fid}:
    description: A user followed/to follow by uid.
    parameters:
      - $ref: "#/components/parameters/uid"
      - $ref: "#/components/parameters/fid"
    put:
      tags: ["follow"]
      operationId: followUser
      summary: Follow a user.
      description: |
        Follow a user -> adds it to the collection.
        As a side effect, the user followed will have this user in the follower
        section.
      responses:
        "200":
          description: User already followed.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/FollowData"}
        "201":
          description: User followed.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/FollowData"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "404":
          description: The user specified with fid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "500": {$ref: "#/components/responses/GenericServerError"}
    delete:
      tags: ["follow"]
      operationId: unfollowUser
      summary: Unfollow a user.
      description: |
        Unfollow a user -> removes it to the collection.
        As a side effect, the user unfollowed will have this user removed
        from his follower collection.
      responses:
        "204":
          description: User unfollowed.
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
# Bans logic
  /users/{uid}/bans:
    description: List of a user bans.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["ban"]
      operationId: getBans
      summary: List user's bans.
      description: |
        Retrieve a list of users banned by this user.
      responses:
        "200": {$ref: "#/components/responses/BansListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /users/{uid}/bans/{bid}:
    description: A user followed/to follow by uid.
    parameters:
      - $ref: "#/components/parameters/uid"
      - $ref: "#/components/parameters/bid"
    put:
      tags: ["ban"]
      operationId: banUser
      summary: Ban a user.
      description: |
        Ban a user -> adds it to the collection.
        As a side effect, the user banned will not be able to search and see 
        this user profile. Also, the follows are removed between this two users.
      responses:
        "200":
          description: User already banned.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/BanData"}
        "201":
          description: User banned.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/BanData"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "404":
          description: The user specified with bid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "500": {$ref: "#/components/responses/GenericServerError"}
    delete:
      tags: ["ban"]
      operationId: unbanUser
      summary: Unban a user.
      description: |
        Unban a user -> removes it to the collection.
        As a side effect, the user unbunned is now able to search and
        see this user profile, but the follows are not restored.
      responses:
        "204":
          description: User banned.
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
# User's post dedicated endpoints.
  /users/{uid}/posts:
    description: Post collection of a user.
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      tags: ["post"]
      operationId: getUserPosts
      summary: Retrieve User posts.
      description: |
        Obtain the list of posts published by the uid user.

        This operation is not permitted from user banned by the uid user.
      responses:
        "200": {$ref: "#/components/responses/SimplePostsResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /users/{uid}/posts/{pid}:
    description: Post of a user.
    parameters:
      - $ref: "#/components/parameters/uid"
      - $ref: "#/components/parameters/pid"
    get:
      tags: ["post"]
      operationId: getUserPost
      summary: Retrieve User's post data.
      description: |
        Obtain the complete data of a user's post.

        This operation is not permitted from user banned by the uid user.
      responses:
        "200": {$ref: "#/components/responses/PostsListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
# Collection of Posts logic
  /posts:
    description: List of all Posts in WasaPhoto.
    post:
      tags: ["post"]
      operationId: uploadPhoto
      summary: Upload photo.
      description: |
        Create a new post from a user uploading a photo.
      requestBody:
        description: The binary file of image to upload as post.
        content:
          image/*:
            schema:
# https://swagger.io/docs/specification/data-models/data-types/#file
              description: Photo binary file.
              type: string
              minLength: 1
              maxLength: 20971520 # 20MB
              format: binaryù
      responses:
        "201":
          description: |
            The image was uploaded and the post was created.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/SimplePost"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /posts/{pid}:
    description: A single post identified by pid.
    parameters:
      - $ref: "#/components/parameters/pid"
    delete:
      tags: ["post"]
      operationId: deletePhoto
      summary: Delete a post
      description: |
        Delete an existing post.
        The only user that can delete the post is the one who created it.
      responses:
        "204":
          description: |
            The post was deleted. (Or si not existing).
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /posts/{pid}/likes/{uid}:
    parameters:
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/uid"
    put:
      tags: ["post"]
      operationId: likePhoto
      summary: Like a post.
      description: |
        The specified user leave a like to the specified post.
      responses:
        "200":
          description: Post already liked.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Like"}
        "201":
          description: Like added to post.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Like"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "404":
          description: pid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
    delete:
      tags: ["post"]
      operationId: unlikePhoto
      summary: Remove like from a post.
      description: |
        The specified user removes a like previously added to this post.
      responses:
        "204":
          description: Like removed.
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "404":
          description: pid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /posts/{pid}/comments:
    parameters:
      - $ref: "#/components/parameters/pid"
    get:
      tags: ["post"]
      operationId: getPostComments
      summary: Get a list of post's comments.
      description: |
        List all post's comments in reverse chronological order.
      responses:
        "200": {$ref: "#/components/responses/CommentsListResult"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "404":
          description: pid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
    post:
      tags: ["post"]
      operationId: commentPhoto
      summary: Leave a comment to this post.
      description: |
        Create a new comment and leave it under this post.
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: "#/components/schemas/NewComment"}
      responses:
        "201":
          description: Post commented.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Comment"}
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "404":
          description: pid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}
  /posts/{pid}/comments/{cid}:
    parameters:
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/cid"
    delete:
      tags: ["post"]
      operationId: uncommentPhoto
      summary: Delete a comment
      description: |
        Delete a post's comment.
        This operation can be performed by the owner of the comment or
        the owner of the post.
      responses:
        "204":
          description: The comment was deleted.
        "400": {$ref: "#/components/responses/GenericBadRequest"}
        "401": {$ref: "#/components/responses/BadAuthentication"}
        "404":
          description: pid does not exists.
          content:
            text/plain:
              schema: {$ref: "#/components/schemas/GenericError"}
        "403": {$ref: "#/components/responses/BadAuthorization"}
        "500": {$ref: "#/components/responses/GenericServerError"}

      
# Generic Components
components:
  parameters:
    uid:
      name: uid
      required: true
      in: path
      description: The unique ID of a user.
      schema: {$ref: "#/components/schemas/ResourceId"}
    fid:
      name: fid
      required: true
      in: path
      description: The unique ID of a followed/following user. 
      schema: {$ref: "#/components/schemas/ResourceId"}
    bid:
      name: bid
      required: true
      in: path
      description: The unique ID of a banned/banning user. 
      schema: {$ref: "#/components/schemas/ResourceId"}
    pid:
      name: pid
      required: true
      in: path
      description: The unique ID of a post.
      schema: {$ref: "#/components/schemas/ResourceId"}
    cid:
      name: cid
      required: true
      in: path
      description: The unique ID of a comment.
      schema: {$ref: "#/components/schemas/ResourceId"}

  responses:
    GenericBadRequest:
      description: |
        The request is not consistent with API specifications.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
    GenericServerError:
      description: |
        Unexpected generic error on the server.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
    BadAuthentication:
      description: |
          The request needs a valid authentication,
          but none (or an invalid one) was given.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
    BadAuthorization:
      description: |
        The authentication provided is not sufficient to
        provide this action.
      content:
        text/plain:
          schema: {$ref: "#/components/schemas/GenericError"}
    UserListResult:
      description: |
        The search of a username is successfull.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/UserSimpleDataList"}
    FollowListResult:
      description: |
        A list of user follow.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/UserSimpleDataList"}
    BansListResult:
      description: |
        A list of user bans.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/UserSimpleDataList"}
    FeedsResult:
      description: |
        The feed of a user.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/UserFeedData"}
    SimplePostsResult:
      description: A list of simple posts.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/SimplePostDataList"}
    PostsListResult:
      description: A list of posts.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/PostDataList"}
    CommentsListResult:
      description: A list of post's comments.
      content:
        application/json:
          schema: {$ref: "#/components/schemas/CommentDataList"}
  
  schemas:
# Generic data
    GenericError:
      description: Generic error description.
      type: string
      minLength: 0
      maxLength: 250
      readOnly: true
    ResourceId:
      description: A generic resource 64-bit ID as a base-16 string.
      type: string
      example: "517dc7caa704a06f"
      minLength: 1
      maxLength: 16
      readOnly: true
      pattern: ^[0-9a-fA-F]{1,16}
    Username:
      description: User's personal and unique username.
      type: string
      example: john_doe_42
      pattern: ^[a-z_0-9]{3,16}
      minLength: 3
      maxLength: 16
    SimplePost:
      description: |
        A simple rapresentation of a Post.
      type: object
      properties:
        pid: {$ref: "#/components/schemas/ResourceId"}
        imageUrl: {$ref: "#/components/schemas/ImageUrl"}
        uploadTime: {$ref: "#/components/schemas/DateTime"}
        author: {$ref: "#/components/schemas/UserSimpleData"}
    Post:
      description: A generic Post of a user.
      type: object
      properties:
        pid: {$ref: "#/components/schemas/ResourceId"}
        imageUrl: {$ref: "#/components/schemas/ImageUrl"}
        author: {$ref: "#/components/schemas/UserSimpleData"}
        uploadTime: {$ref: "#/components/schemas/DateTime"}
        likesCount:
          description: Likes of this post.
          type: integer
          minimum: 0
          maximum: 1000
          readOnly: true
        commentsCount:
          description: Numer of comments
          type: integer
          minimum: 0
          maximum: 20
          readOnly: true
        comments:
          description: Post's comments.
          type: array
          minItems: 0
          maxItems: 20
          items: {$ref: "#/components/schemas/Comment"}
    Comment:
      description: A post's comment.
      type: object
      properties:
        id: {$ref: "#/components/schemas/ResourceId"}
        author: {$ref: "#/components/schemas/UserSimpleData"}
        post: {$ref: "#/components/schemas/ResourceId"}
        text:
          description: Text content of the comment.
          type: string
          minimum: 1
          maximum: 256
          readOnly: true
          pattern: ".+"
    NewComment:
      description: A new comment to leave under a post.
      type: object
      properties:
        text:
          description: Text content of the comment.
          type: string
          minimum: 1
          maximum: 256
          readOnly: true
          pattern: ".+"
    Like:
      description: A post's like
      type: object
      properties:
        uid: {$ref: "#/components/schemas/ResourceId"}
        pid: {$ref: "#/components/schemas/ResourceId"}
    ImageUrl:
      description: |
        The path the image file.
        Generally this path is in the format of users/{uid}/posts/{pid}.
      type: string
      minLength: 10
      maxLength: 256
      readOnly: true
      example: users/124fa3/posts/1cf340a
    DateTime:
      description: |
        Datetime rapresentation as "YYYY-MM-DD hh:mm:ss".
        Time format is 24h.
      type: string
      format: date-time
      minLength: 20
      maxLength: 20
      readOnly: true
      example: "2024-03-13T12:30:12"
    FollowData:
      description: |
        Ids representing user followed and user following.
        followingId := user following
        followedId := user followed
      type: object
      properties:
        followingId: {$ref: "#/components/schemas/ResourceId"}
        followedId: {$ref: "#/components/schemas/ResourceId"}
    BanData:
      description: |
        Ids representing user banned and user banning.
        banningId := user banning
        bannedId := user banned
      type: object
      properties:
        banningId: {$ref: "#/components/schemas/ResourceId"}
        bannedId: {$ref: "#/components/schemas/ResourceId"}
# Request datas
    LoginRequest:
      description: User data for login.
      type: object
      properties:
        username: {$ref: "#/components/schemas/Username"}
    UserLogin:
      description: Result data at user login
      type: object
      properties:
        uid: {$ref: "#/components/schemas/ResourceId"}
        username: {$ref: "#/components/schemas/Username"}
        token: {$ref: "#/components/schemas/ResourceId"}
    UserSimpleDataList:
      description: |
        A list of simple user's data.
      allOf:
        - description: Retrieved users info.
          type: object
          readOnly: true
          properties:
            data:
              description: List of users data.
              type: array
              minItems: 0
              maxItems: 20
              items: {$ref: "#/components/schemas/UserSimpleData"}
    UserFeedData:
      description: |
        The feed of a user represented as a list of posts.
      allOf:
        - $ref: "#/components/schemas/SimplePostDataList"
    UserSimpleData:
      description: |
        A simple rapresentation of a user.
      type: object
      properties:
        uid: {$ref: "#/components/schemas/ResourceId"}
        username: {$ref: "#/components/schemas/Username"}
    UserProfileData:
      description: |
        Data of a user profile.
      allOf:
        - $ref: "#/components/schemas/UserSimpleData"
        - $ref: "#/components/schemas/SimplePostDataList"
    SimplePostDataList:
      description: A LIst of simple posts.
      type: object
      readOnly: true
      properties:
        data:
          description: The list of simple posts.
          type: array
          minItems: 0
          maxItems: 20
          items: {$ref: "#/components/schemas/SimplePost"}
    PostDataList:
      description: |
        A List of posts.
      type: object
      readOnly: true
      properties:
        data:
          description: The list of posts.
          type: array
          minItems: 0
          maxItems: 20
          items: {$ref: "#/components/schemas/Post"}
    CommentDataList:
      description: A list of comments
      type: object
      readOnly: true
      properties:
        data:
          description: The list of comments.
          type: array
          minItems: 0
          maxItems: 20
          items: {$ref: "#/components/schemas/Comment"}
# Security
  securitySchemes:
    BearerToken:
      description: |
        User token used for authentication.
        Hex string base-64 created on login.
        Unsecure, used only for demostration purpose.
      type: http
      scheme: bearer
        
# Global security scheme, disabled when not necessary.
security:
  - BearerToken: []